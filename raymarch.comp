#version 430 core

//================================================================================================
// Panda3D Compute Shader Raymarcher - v2 (Corrected)
//================================================================================================

//------------------------------------------------------------------------------------------------
// IO and Layout
//------------------------------------------------------------------------------------------------
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba32f, binding = 0) writeonly uniform image2D outputImage;

//------------------------------------------------------------------------------------------------
// Uniforms (Inputs from Python)
//------------------------------------------------------------------------------------------------
// Camera Data for Manual Ray Construction
uniform vec3 camera_pos;       // Camera position in world space (Ray Origin)
uniform mat4 cam_to_world;     // Camera's world matrix (rotates Ray Direction)
uniform mat4 proj_mat;         // Projection matrix (to extract Field of View)

uniform float time;

// Lights are provided via a Shader Storage Buffer Object (SSBO).
// Each light stores position and color as vec4 values to satisfy std430.
// See https://docs.gl/gl4/glBindBuffer for details.
struct Light {
    vec4 position;
    vec4 color;
};

layout(std430, binding = 1) readonly buffer Lights {
    Light lights[];
};

uniform uint num_lights;

// PBR Material Properties
// Albedo and roughness are computed procedurally now, leaving only the
// reflectance parameter. See the GLSL uniform rules in the spec:
// https://docs.gl/gl4/glUniform
uniform float u_R0; // Reflectance at normal incidence (typically ~0.04 for dielectrics)


//------------------------------------------------------------------------------------------------
// Constants
//------------------------------------------------------------------------------------------------
const float PI = 3.14159265359;
const int   MAX_STEPS = 256;
const float MAX_DIST = 1000.0;
const float SURF_DIST = 0.0005;

float epsilon(float t) {
    return t * 0.0001 > SURF_DIST ? t * 0.0001 : SURF_DIST;
}

//================================================================================================
// Scene Definition (Signed Distance Function)
//================================================================================================
float lattice(vec3 p) {
    vec3 q = abs(mod(p, vec3(32, 16, 32)) - vec3(16, 8, 16));
    vec3 q2 = abs(mod(p - vec3(4, 0, 0), vec3(32, 2, 16)) - vec3(16, 1, 8));
    float hole1 = max(q2.x - 7.65, q.z - 8.);
    float hole2 = max(-p.y - .75, q.z - 4.85);
    float hole3 = abs(mod(p.z + 16., 32.) - 16.) - 2.85;
    float fl = max(p.y + 3.5, -hole1);
    float wall = max(q2.x - 8., q2.z - 2.15);
    wall = max(wall, -max(abs(abs(q2.x - 8.) - 4.) - 1.75, abs(q.y - 8.) - .5));
    q2.x = abs(q2.x - 8.);
    float rail = max(q2.x - .15, q2.y - .15);
    float rail2 = max(q2.x - .15/6., abs(mod(q2.y + 1./6., 1./3.) - 1./6.) - .15/6.);
    rail = min(rail, max(rail2, -p.y - 3.));
    float posts = max(q2.x - .15, abs(mod(q2.z, 2.) - 1.) - .15);
    rail = min(rail, posts);
    rail = max(rail, -hole2);
    rail = max(rail, -hole3);
    q.xz = abs(q.xz - vec2(8));
    q.x = abs(q.x - 4.);
    float pylon = min( max(max(q.x, q.y) - 3., -p.y) , min(max(q.y, q.z)*.55 + length(q.yz)*.45 - 3.1, max(q.x, q.z)) - 2.);
    float rndPylon = length(vec2(q.xz)*vec2(.7, .4)) - 1.;
    q = abs(mod(q,  2.) - 1.);
    float pylonHole = min(q.x, min(q.y, q.z));
    float structure = min(max(pylon, pylonHole) - .15, min(rndPylon, wall));
    return min(structure, min(fl, rail));
}

float map(vec3 p) { return lattice(p); }

vec3 getNormal(vec3 p) {
    vec3 n = vec3(0.0);
    const vec3 offsets[8] = vec3[](
        vec3(1,1,1), vec3(-1,1,1), vec3(1,-1,1), vec3(-1,-1,1),
        vec3(1,1,-1), vec3(-1,1,-1), vec3(1,-1,-1), vec3(-1,-1,-1)
    );
    for(int i=0;i<8;++i){
        vec3 e = offsets[i] * SURF_DIST;
        n += offsets[i] * map(p + e);
    }
    return normalize(n);
}

//================================================================================================
// PBR, Lighting, and Shadowing
//================================================================================================
float DistributionGGX(vec3 N, vec3 H, float r) { float a2=r*r*r*r; float nH=max(dot(N,H),0.); return a2/(PI*pow(nH*nH*(a2-1.)+1.,2.)); }
float GeometrySchlickGGX(float nV, float r) { float k=(r+1.)*(r+1.)/8.; return nV/(nV*(1.-k)+k); }
float GeometrySmith(vec3 N, vec3 V, vec3 L, float r) { return GeometrySchlickGGX(max(dot(N,V),0.),r)*GeometrySchlickGGX(max(dot(N,L),0.),r); }
vec3 fresnelSchlick(float c, vec3 F0) { return F0+(vec3(1.)-F0)*pow(clamp(1.-c,0.,1.),5.);}

/* Ambient occlusion disabled for now */
float calcAO(vec3 pos, vec3 nor) { return 1.0; }

float calculateShadow(vec3 ro, vec3 rd, float max_t) {
    float t = 0.01;
    for (int i = 0; i < 256; ++i) {
        float h = map(ro + rd * t);
        if (h < epsilon(t)) return 0.0;
        t += h;
        if (t > max_t) break;
    }
    return 1.0;
}
// 3D Simplex Noise implementation
vec3 mod289(vec3 x){return x - floor(x/289.0)*289.0;}
vec4 mod289(vec4 x){return x - floor(x/289.0)*289.0;}
vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){
    const vec2 C=vec2(1.0/6.0,1.0/3.0);
    const vec4 D=vec4(0.0,0.5,1.0,2.0);

    vec3 i=floor(v+dot(v,C.yyy));
    vec3 x0=v-i+dot(i,C.xxx);

    vec3 g=step(x0.yzx,x0.xyz);
    vec3 l=1.0-g;
    vec3 i1=min(g.xyz,l.zxy);
    vec3 i2=max(g.xyz,l.zxy);

    vec3 x1=x0-i1+C.xxx;
    vec3 x2=x0-i2+C.yyy;
    vec3 x3=x0-D.yyy;

    i=mod289(i);
    vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));

    float n_=0.142857142857;
    vec3 ns=n_*D.wyz-D.xzx;

    vec4 j=p-49.0*floor(p*ns.z*ns.z);

    vec4 x_=floor(j*ns.z);
    vec4 y_=floor(j-7.0*x_);

    vec4 x=x_*ns.x+ns.y;
    vec4 y=y_*ns.x+ns.y;
    vec4 h=1.0-abs(x)-abs(y);

    vec4 b0=vec4(x.xy,y.xy);
    vec4 b1=vec4(x.zw,y.zw);

    vec4 s0=floor(b0)*2.0+1.0;
    vec4 s1=floor(b1)*2.0+1.0;
    vec4 sh=-step(h,vec4(0.0));

    vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;
    vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;

    vec3 p0=vec3(a0.xy,h.x);
    vec3 p1=vec3(a0.zw,h.y);
    vec3 p2=vec3(a1.xy,h.z);
    vec3 p3=vec3(a1.zw,h.w);

    vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));
    p0*=norm.x;
    p1*=norm.y;
    p2*=norm.z;
    p3*=norm.w;

    vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);
    m=m*m;
    return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));
}

float fbm3(vec3 p){
    float v=0.0;
    float a=0.5;
    mat3 m3=mat3(0.00,0.80,0.60,-0.80,0.36,-0.48,-0.60,-0.48,0.64);
    for(int i=0;i<7;i++){
        v+=a*snoise(p);
        p=m3*p*2.0;
        a*=0.5;
    }
    return v;
}



vec3 ACESFilm(vec3 x){
    const float a = 2.51;
    const float b = 0.03;
    const float c = 2.43;
    const float d = 0.59;
    const float e = 0.14;
    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.0,1.0);
}

vec4 calculateColor(vec3 p, vec3 n, vec3 V) {

    // Procedural marble based on 3D fBm noise
    float noiseVal = fbm3(p * 2.0);
    float m = sin(p.y * 4.0 + noiseVal * 6.0);
    vec3 albedo = mix(vec3(0.2, 0.2, 0.25), vec3(0.9, 0.9, 0.95), m);
    float roughness = 0.25 + 0.15 * noiseVal;


    // PBR properties for a non-metallic surface
    float metallic = 0.0;
    vec3 F0 = vec3(u_R0);

// float ao = calcAO(p, n);

    // Accumulate lighting from the buffer of lights
    vec3 Lo = vec3(0.0); // Final outgoing radiance
    for (uint i = 0u; i < num_lights; ++i) {
        vec3 light_pos = lights[i].position.xyz;
        vec3 L = normalize(light_pos - p);
        float light_dist = length(light_pos - p);
        float attenuation = 1.0 / (light_dist * light_dist);
        vec3 radiance = lights[i].color.rgb * attenuation;
        vec3 H = normalize(V + L);
        float NdotL = max(dot(n, L), 0.0);

        if (NdotL > 0.0) {
            float shadow = calculateShadow(p + n * SURF_DIST * 2.0, L, light_dist);
            if (shadow > 0.0) {
                float NDF = DistributionGGX(n, H, roughness);
                float G = GeometrySmith(n, V, L, roughness);
                vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);

                vec3 spec = (NDF * G * F) / (4.0 * max(dot(n,V),0.0) * NdotL + 0.001);

                vec3 kd = vec3(1.0) - F;
                kd *= (1.0 - metallic);

                vec3 diffuse = kd * albedo / PI;

                Lo += (diffuse + spec) * radiance * NdotL;
            }
        }
    }

vec3 color = Lo;
    

    // HDR Tone Mapping and Gamma Correction
    color = ACESFilm(color);
    color = pow(color, vec3(1.0/2.2));
    return vec4(color, 1.0);
}

//================================================================================================
// Main Entry Point
//================================================================================================
void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(outputImage);
    if (pixel.x >= size.x || pixel.y >= size.y) {
        return;
    }

    // --- FUNDAMENTALLY CORRECT RAY CONSTRUCTION ---
    // 1. Convert pixel coordinate to Normalized Device Coordinates (NDC) [-1, 1]
    //    The Y-coordinate is flipped to match GL's bottom-left origin.
    vec2 uv = (vec2(pixel) + 0.5) / vec2(size);
    vec2 ndc = vec2(uv.x, 1.0 - uv.y) * 2.0 - 1.0;

    // 2. Create the ray direction in CAMERA-space.
    //    We use the FOV information stored in the projection matrix.
    //    Panda3D's Y-up projection matrix has the form:
    //    [1/tan(fovX/2), 0,             0,  0]
    //    [0,             1/tan(fovY/2), 0,  0]
    //    [...]
    //    So, we can find the camera-space direction by dividing NDC by these terms.
    vec3 dir_cam_space = vec3(ndc.x / proj_mat[0][0], ndc.y / proj_mat[1][1], -1.0);

    // 3. Define the Ray Origin and Direction in WORLD-space.
    //    Ray Origin (ro) is simply the camera's world position.
    //    Ray Direction (rd) is the camera-space direction rotated into world space.
    vec3 ro = camera_pos;
    vec3 rd = normalize((cam_to_world * vec4(dir_cam_space, 0.0)).xyz);

    // --- Primary Raymarch ---
    float t = 0.0;
    for (int i = 0; i < MAX_STEPS; ++i) {
        vec3 p = ro + rd * t;
        float d = map(p);
        if (d < epsilon(t)) {
            vec3 V = -rd;
            vec3 n = getNormal(p);
            imageStore(outputImage, pixel, calculateColor(p, n, V));
            return;
        }
        t += d;
        if (t > MAX_DIST) break;
    }

    imageStore(outputImage, pixel, vec4(0.0, 0.0, 0.0, 1.0));
}
